{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/map/map.component.html","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/backend/backend.service.ts","webpack:///./src/app/map/map.component.css","webpack:///./src/app/map/map.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.chunk.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<h1>{{title}}</h1>\\n<app-map></app-map>\\n\"","module.exports = \"<h2>Brazil By County</h2>\\n<h3>Total Cases Shown: {{number_cases}}</h3>\\n\\n<div id=\\\"map\\\"></div>\\n\\n<div>{{trimmedJson}}</div>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","import { Component } from '@angular/core';\nimport { NgModule } from '@angular/core';\n//import { HttpClientModule } from '@angular/common/http';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Imported Malaria Monitor';\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { MapComponent } from './map/map.component';\nimport { BackendService } from './backend/backend.service';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n  declarations: [\n    AppComponent,\n    MapComponent\n  ],\n  providers: [BackendService],\n  bootstrap: [AppComponent],\n  schemas: [ CUSTOM_ELEMENTS_SCHEMA ]\n})\nexport class AppModule { }\n","import { Injectable, NgModule } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class BackendService {\n  constructor(private http: HttpClient) {}\n  backendUrl = 'localhost:8080/geojson/brazil';\n  geoJsonJUrl = 'static/BRA_adm3_NorthWest.json';\n  getGeoJson() {\n     return this.http.get(this.backendUrl);\n  }\n  getBackupGeoJson() {\n     return this.http.get(this.geoJsonJUrl);\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21hcC9tYXAuY29tcG9uZW50LmNzcyJ9 */\"","declare var require: any\nimport * as leaflet from 'leaflet';\nimport { Component, OnInit } from '@angular/core';\nimport { HttpClientModule } from  '@angular/common/http'\nimport { BackendService } from '../backend/backend.service';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.css']\n})\nexport class MapComponent implements OnInit {\n\n  number_cases = 0;\n  trimmedJson = '';\n\n  constructor(private service: BackendService) {\n  }\n\n  ngOnInit() {\n    this.service.getGeoJson()\n          .toPromise()\n          .then(response => {this.makeMap(response)})\n          .catch((error:any) => {this.getBackupGeoJson()});\n  }\n\n  getBackupGeoJson(){\n      this.service.getBackupGeoJson()\n      .toPromise()\n      .then(response => {this.makeMap(response)})\n  };\n\n  makeMap(geoJson) {\n\n    // start with a view in the middle of Brazil, zoom level 6\n    var map = leaflet.map('map').setView([-5.00, -59.00], 6);\n\n    // Add the goemap and test adding data to the item\n    leaflet.geoJSON(geoJson, {\n      onEachFeature: function (feature, layer) {\n        let p = feature.properties;\n        let name = p.NAME_3;\n        let fullName = `${p.NAME_2},${p.NAME_1},${p.NAME_0}`;\n        layer.bindPopup('<h1>' + name + '</h1><p>' + fullName + '</p>');\n      }\n    }).addTo(map);\n  }\n\n  handleError(err) {\n    //this.errormessage = \"Cound not retrieve map data\";\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}